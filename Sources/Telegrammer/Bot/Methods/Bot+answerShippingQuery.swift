// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    /// - Parameters:
    ///     - shipping_query_id: Unique identifier for the query to be answered
    ///     - ok: Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
    ///     - shipping_options: Required if ok is True. A JSON-serialized array of available shipping options.
    ///     - error_message: Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
    /// - Returns: Future<Bool>. Throws on errors.
    /// - Note: Asynchronous method.
    ///
    /// [- SeeAlso: ]<https://core.telegram.org/bots/api#answershippingquery>

    public struct AnswerShippingQueryParams: JSONEncodable {
        var shippingQueryId: String
        var ok: Bool
        var shippingOptions: [ShippingOption]?
        var errorMessage: String?

        enum CodingKeys: String, CodingKey {
            case shippingQueryId = "shipping_query_id"
            case ok = "ok"
            case shippingOptions = "shipping_options"
            case errorMessage = "error_message"
        }

        public init(shippingQueryId: String, ok: Bool, shippingOptions: [ShippingOption]? = nil, errorMessage: String? = nil) {
            self.shippingQueryId = shippingQueryId
            self.ok = ok
            self.shippingOptions = shippingOptions
            self.errorMessage = errorMessage
        }
    }

    @discardableResult
    public func answerShippingQuery(params: AnswerShippingQueryParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Bool>>
        response = try client.respond(endpoint: "answerShippingQuery", body: body, headers: headers)
        return response.flatMap(to: Bool.self) { try self.wrap($0) }
    }
}
