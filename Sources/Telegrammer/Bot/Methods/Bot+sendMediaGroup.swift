// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    ///     - media: A JSON-serialized array describing photos and videos to be sent, must include 2â€“10 items
    ///     - disable_notification: Sends the messages silently. Users will receive a notification with no sound.
    ///     - reply_to_message_id: If the messages are a reply, ID of the original message
    /// - Returns: Future<[Message]>. Throws on errors.
    /// - Note: Asynchronous method.
    ///
    /// [- SeeAlso: ]<https://core.telegram.org/bots/api#sendmediagroup>

    public struct SendMediaGroupParams: JSONEncodable {
        var chatId: ChatId
        var media: [InputMedia]
        var disableNotification: Bool?
        var replyToMessageId: Int?

        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case media = "media"
            case disableNotification = "disable_notification"
            case replyToMessageId = "reply_to_message_id"
        }

        public init(chatId: ChatId, media: [InputMedia], disableNotification: Bool? = nil, replyToMessageId: Int? = nil) {
            self.chatId = chatId
            self.media = media
            self.disableNotification = disableNotification
            self.replyToMessageId = replyToMessageId
        }
    }

    @discardableResult
    public func sendMediaGroup(params: SendMediaGroupParams) throws -> Future<[Message]> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<[Message]>>
        response = try client.respond(endpoint: "sendMediaGroup", body: body, headers: headers)
        return response.flatMap(to: [Message].self) { try self.wrap($0) }
    }
}
