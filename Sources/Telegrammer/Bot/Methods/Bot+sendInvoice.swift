// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Use this method to send invoices. On success, the sent Message is returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target private chat
    ///     - title: Product name, 1-32 characters
    ///     - description: Product description, 1-255 characters
    ///     - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    ///     - provider_token: Payments provider token, obtained via Botfather
    ///     - start_parameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
    ///     - currency: Three-letter ISO 4217 currency code, see more on currencies
    ///     - prices: Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    ///     - provider_data: JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
    ///     - photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
    ///     - photo_size: Photo size
    ///     - photo_width: Photo width
    ///     - photo_height: Photo height
    ///     - need_name: Pass True, if you require the user's full name to complete the order
    ///     - need_phone_number: Pass True, if you require the user's phone number to complete the order
    ///     - need_email: Pass True, if you require the user's email address to complete the order
    ///     - need_shipping_address: Pass True, if you require the user's shipping address to complete the order
    ///     - send_phone_number_to_provider: Pass True, if user's phone number should be sent to provider
    ///     - send_email_to_provider: Pass True, if user's email address should be sent to provider
    ///     - is_flexible: Pass True, if the final price depends on the shipping method
    ///     - disable_notification: Sends the message silently. Users will receive a notification with no sound.
    ///     - reply_to_message_id: If the message is a reply, ID of the original message
    ///     - reply_markup: A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
    /// - Returns: Future<Message>. Throws on errors.
    /// - Note: Asynchronous method.
    ///
    /// [- SeeAlso: ]<https://core.telegram.org/bots/api#sendinvoice>

    public struct SendInvoiceParams: JSONEncodable {
        var chatId: Int64
        var title: String
        var description: String
        var payload: String
        var providerToken: String
        var startParameter: String
        var currency: String
        var prices: [LabeledPrice]
        var providerData: String?
        var photoUrl: String?
        var photoSize: Int?
        var photoWidth: Int?
        var photoHeight: Int?
        var needName: Bool?
        var needPhoneNumber: Bool?
        var needEmail: Bool?
        var needShippingAddress: Bool?
        var sendPhoneNumberToProvider: Bool?
        var sendEmailToProvider: Bool?
        var isFlexible: Bool?
        var disableNotification: Bool?
        var replyToMessageId: Int?
        var replyMarkup: InlineKeyboardMarkup?

        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case title = "title"
            case description = "description"
            case payload = "payload"
            case providerToken = "provider_token"
            case startParameter = "start_parameter"
            case currency = "currency"
            case prices = "prices"
            case providerData = "provider_data"
            case photoUrl = "photo_url"
            case photoSize = "photo_size"
            case photoWidth = "photo_width"
            case photoHeight = "photo_height"
            case needName = "need_name"
            case needPhoneNumber = "need_phone_number"
            case needEmail = "need_email"
            case needShippingAddress = "need_shipping_address"
            case sendPhoneNumberToProvider = "send_phone_number_to_provider"
            case sendEmailToProvider = "send_email_to_provider"
            case isFlexible = "is_flexible"
            case disableNotification = "disable_notification"
            case replyToMessageId = "reply_to_message_id"
            case replyMarkup = "reply_markup"
        }

        public init(chatId: Int64, title: String, description: String, payload: String, providerToken: String, startParameter: String, currency: String, prices: [LabeledPrice], providerData: String? = nil, photoUrl: String? = nil, photoSize: Int? = nil, photoWidth: Int? = nil, photoHeight: Int? = nil, needName: Bool? = nil, needPhoneNumber: Bool? = nil, needEmail: Bool? = nil, needShippingAddress: Bool? = nil, sendPhoneNumberToProvider: Bool? = nil, sendEmailToProvider: Bool? = nil, isFlexible: Bool? = nil, disableNotification: Bool? = nil, replyToMessageId: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil) {
            self.chatId = chatId
            self.title = title
            self.description = description
            self.payload = payload
            self.providerToken = providerToken
            self.startParameter = startParameter
            self.currency = currency
            self.prices = prices
            self.providerData = providerData
            self.photoUrl = photoUrl
            self.photoSize = photoSize
            self.photoWidth = photoWidth
            self.photoHeight = photoHeight
            self.needName = needName
            self.needPhoneNumber = needPhoneNumber
            self.needEmail = needEmail
            self.needShippingAddress = needShippingAddress
            self.sendPhoneNumberToProvider = sendPhoneNumberToProvider
            self.sendEmailToProvider = sendEmailToProvider
            self.isFlexible = isFlexible
            self.disableNotification = disableNotification
            self.replyToMessageId = replyToMessageId
            self.replyMarkup = replyMarkup
        }
    }

    @discardableResult
    public func sendInvoice(params: SendInvoiceParams) throws -> Future<Message> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Message>>
        response = try client.respond(endpoint: "sendInvoice", body: body, headers: headers)
        return response.flatMap(to: Message.self) { try self.wrap($0) }
    }
}
