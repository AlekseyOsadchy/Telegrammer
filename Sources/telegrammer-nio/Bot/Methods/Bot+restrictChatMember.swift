// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all boolean parameters to lift restrictions from a user. Returns True on success.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    ///     - user_id: Unique identifier of the target user
    ///     - until_date: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
    ///     - can_send_messages: Pass True, if the user can send text messages, contacts, locations and venues
    ///     - can_send_media_messages: Pass True, if the user can send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages
    ///     - can_send_other_messages: Pass True, if the user can send animations, games, stickers and use inline bots, implies can_send_media_messages
    ///     - can_add_web_page_previews: Pass True, if the user may add web page previews to their messages, implies can_send_media_messages
    /// - Returns: Future<Bool>. Throws on errors.
    /// - Note: Asynchronous method.
    ///
    /// [- SeeAlso: ]<https://core.telegram.org/bots/api#restrictchatmember>

    public struct RestrictChatMemberParams: JSONEncodable {
        var chatId: ChatId
        var userId: Int64
        var untilDate: Int?
        var canSendMessages: Bool?
        var canSendMediaMessages: Bool?
        var canSendOtherMessages: Bool?
        var canAddWebPagePreviews: Bool?

        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case userId = "user_id"
            case untilDate = "until_date"
            case canSendMessages = "can_send_messages"
            case canSendMediaMessages = "can_send_media_messages"
            case canSendOtherMessages = "can_send_other_messages"
            case canAddWebPagePreviews = "can_add_web_page_previews"
        }

        public init(chatId: ChatId, userId: Int64, untilDate: Int? = nil, canSendMessages: Bool? = nil, canSendMediaMessages: Bool? = nil, canSendOtherMessages: Bool? = nil, canAddWebPagePreviews: Bool? = nil) {
            self.chatId = chatId
            self.userId = userId
            self.untilDate = untilDate
            self.canSendMessages = canSendMessages
            self.canSendMediaMessages = canSendMediaMessages
            self.canSendOtherMessages = canSendOtherMessages
            self.canAddWebPagePreviews = canAddWebPagePreviews
        }
    }

    public func restrictChatMember(params: RestrictChatMemberParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = try httpHeaders(for: params)
        let response: Future<TelegramContainer<Bool>>
        response = try client.respond(endpoint: "restrictChatMember", body: body, headers: headers)
        return response.flatMap(to: Bool.self) { try self.wrap($0) }
    }
}
